<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Task; // <-- Import the Task model
use Illuminate\Support\Facades\Validator; // <-- Import the Validator

class TaskController extends Controller
{
    /**
     * GET /api/tasks
     * Display a listing of all tasks.
     */
    public function index()
    {
        $tasks = Task::all();
        return response()->json($tasks, 200);
    }

    /**
     * POST /api/tasks
     * Store a newly created task in storage.
     */
    public function store(Request $request)
    {
        // Validate the incoming request data
        $validator = Validator::make($request->all(), [
            'task_name' => 'required|string|max:255',
            'description' => 'nullable|string',
        ]);

        // If validation fails, return a 422 error with the messages
        if ($validator->fails()) {
            return response()->json($validator->errors(), 422);
        }

        // Create and save the new task
        $task = Task::create($validator->validated());

        // Return the new task with a 201 Created status code
        return response()->json($task, 201);
    }

    /**
     * GET /api/tasks/{id}
     * This method is not required by the test specification.
     * It is generated by the --api flag but we will not create a route for it.
     */
    public function show(string $id)
    {
        // Logic for a single task would go here if needed.
        // For this test, we leave it empty.
    }

    /**
     * PUT /api/tasks/{id}
     * Update the specified task's status in storage.
     */
    public function update(Request $request, string $id)
    {
        // Find the task by its ID
        $task = Task::find($id);

        // If the task is not found, return a 404 error
        if (!$task) {
            return response()->json(['message' => 'Task not found'], 404);
        }

        // Validate that the 'status' field is present and is a boolean
        $validator = Validator::make($request->all(), [
            'status' => 'required|boolean',
        ]);

        if ($validator->fails()) {
            return response()->json($validator->errors(), 422);
        }

        // Update the task's status
        $task->status = $request->status;
        $task->save();

        // Return the updated task with a 200 OK status
        return response()->json($task, 200);
    }

    /**
     * DELETE /api/tasks/{id}
     * Remove the specified task from storage.
     */
    public function destroy(string $id)
    {
        // Find the task by its ID
        $task = Task::find($id);

        // If the task is not found, return a 404 error
        if (!$task) {
            return response()->json(['message' => 'Task not found'], 404);
        }

        // Delete the task
        $task->delete();

        // Return a 204 No Content response to indicate successful deletion
        return response()->json(null, 204);
    }
}